<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Web.Extensions" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Web.Script.Serialization" #>
<#@ output extension=".cs" #>
// -----------------------------------------------------------------------------------------
//  <auto-generated>
//      This code is auto-generated and changes to this file will be lost when regenerated.
//  </auto-generated>
// -----------------------------------------------------------------------------------------
// ReSharper disable once CheckNamespace
namespace Endjin.SpecFlow.Selenium.Framework
{
    #region Using Directives

    using Endjin.SpecFlow.Selenium.Framework.Environment;
    using Endjin.SpecFlow.Selenium.Framework.Navigation;

    using TechTalk.SpecFlow;

    #endregion

    [Binding]
    public class FeatureHooks
    {
        [BeforeFeature]
        public static void FeatureSetup()
        {
			if (TestEnvironment.Current.IsLocal && TestEnvironment.Current.AutoStartLocalIIS)
			{
				TestEnvironment.Current.StartWebsite();
			}
        }

        [AfterFeature]
        public static void FeatureTeardown()
        {
            TestEnvironment.Current.StopWebsite();
        }
    }

    [Binding]
    public class WebTestSetupHooks
    {
        [BeforeScenario]
        public static void BeforeScenarioSetup()
        {
            BrowserTest.Setup(new WebsiteNavigationMap());
        }
    }

    [Binding]
    public class WebTestTeardownHooks
    {
        [AfterScenario]
        public static void ScenarioTeardown()
        {
            BrowserTest.Teardown();
        }
    }
}

<# 
foreach(var ns in GetFeaturesByNamespaces())
{
#>
namespace <#= ns.Key #>
{
    #region Using Directives
    
    using System.Diagnostics;
    using NUnit.Framework;
    using TechTalk.SpecFlow;
    using Endjin.SpecFlow.Selenium.Framework;
    using Endjin.SpecFlow.Selenium.Framework.Features;

    #endregion

<#
    foreach(var feature in ns)
    {
        var className = feature.Item2.Replace(".feature", "Feature");
#>
<#  if (UseBrowserConfigFile() || IsOnBuildServer())
    { 
#>
<# 
        List<WebTestConfiguration> configurations;
        try
        {
            configurations = GetWebTestConfigurations();
        }
        catch
        {
            configurations = new List<WebTestConfiguration>();
        }

        foreach(WebTestConfiguration configuration in configurations)
        {
#>
        [TestFixture(
            "<#= configuration.Platform #>", 
            "<#= configuration.Browser #>", 
            "<#= configuration.BrowserVersion #>")]
<# 
        }
#>
<#
    }
#>
        public partial class <#= className #> : BrowserTestFeature
        {
            public <#= className #>()
            {
            }

            public <#= className #>(string platform, string browser, string browserVersion)
                : base(platform, browser, browserVersion)
            {
            }
        }
<#
    } 
#>
}
<# 
}
#>

<#+ 
    const string TeamCityVersion = "TEAMCITY_VERSION";
    const string TeamCitySeleniumDriver = "SELENIUM_DRIVER";
    const string TeamCitySeleniumBrowser = "SELENIUM_BROWSER";
    const string TeamCitySeleniumPlatform = "SELENIUM_PLATFORM";
    const string TeamCitySeleniumUrl = "SELENIUM_URL";
    const string TeamCitySeleniumHost = "SELENIUM_HOST";
    const string TeamCitySeleniumPort = "SELENIUM_PORT";
    const string TeamCitySeleniumVersion = "SELENIUM_VERSION";
    const string TeamCitySauceUserName = "SAUCE_USER_NAME";
    const string TeamCitySauceApiKey = "SAUCE_API_KEY";
    const string TeamCitySauceOnDemandBrowsers = "SAUCE_ONDEMAND_BROWSERS";

    string EnvVariable(string variable)
    {
        return System.Environment.GetEnvironmentVariable(variable);
    }

    List<WebTestConfiguration> GetWebTestConfigurations()
    {
        var configurations = new List<WebTestConfiguration>();

        var json = GetJsonWebTestConfigurations();
        var jss = new JavaScriptSerializer();

        var dictionaries = jss.Deserialize<List<Dictionary<string, string>>>(json);
        foreach(var dictionary in dictionaries)
        {
            // Note: When multiple browsers are selected using the TC SauceLabs plugin, the OS value is the 'Platform'.
            var configuration = new WebTestConfiguration 
                                        {
                                            Platform = dictionary.ContainsKey("os") ? dictionary["os"] : dictionary["platform"],
                                            Browser = dictionary.ContainsKey("browser") ? dictionary["browser"] : string.Empty,
                                            Url = dictionary.ContainsKey("url") ? dictionary["url"] : string.Empty,
                                            BrowserVersion = dictionary.ContainsKey("browser-version") ? dictionary["browser-version"] : string.Empty
                                        };
            
            configurations.Add(configuration);
        } 

        return configurations;
    }

    IEnumerable<IGrouping<string, Tuple<string, string>>> GetFeaturesByNamespaces()
    {
        return GetFeatures().GroupBy(tup => tup.Item1);
    }

    List<Tuple<string, string>> GetFeatures()
    {
        const string NamespaceIdentifier = "namespace";
        const string ClassIdentifier = "public partial class";
        var features = new List<Tuple<string, string>>();

        var template = new FileInfo(this.Host.TemplateFile);
        var root = template.Directory.Parent;
        var files = root.GetFiles("*.feature.cs", SearchOption.AllDirectories);

        foreach (var file in files)
        {
            string featureNamespace = string.Empty;
            string featureClass = string.Empty;

            using (var reader = new StreamReader(file.FullName))
            {
                while (!reader.EndOfStream)
                {
                    var line = reader.ReadLine().Trim();
                    
                    if (line.Contains(NamespaceIdentifier))
                    {
                        featureNamespace = line.Replace(NamespaceIdentifier, string.Empty);
                        continue;
                    }

                    if (line.Contains(ClassIdentifier))
                    {
                        featureClass = line.Replace(ClassIdentifier, string.Empty);
                        break;
                    }
                }
            }

            features.Add(new Tuple<string, string>(featureNamespace, featureClass));
        }

        return features;
    }

    bool UseBrowserConfigFile()
    {
        return false;
    }
    
    bool IsOnBuildServer()
    {
        var variable = EnvVariable(TeamCityVersion);
        return !string.IsNullOrEmpty(variable);
    }

    string GetJsonWebTestConfigurations()
    {
        // Check first whether we want to get browser configurations
        // from file regardless of whether we're on the server or not.
        if(UseBrowserConfigFile())
        {
            var template = new FileInfo(this.Host.TemplateFile);
            var file = template.Directory.GetFiles("remote_browser.config.json").FirstOrDefault();
            if(file == null)
            {
                return string.Empty;
            }

            return File.ReadAllText(file.FullName);
        }

        // Note: If multiple browsers are selected in the TC SauceLabs plugin, then the TeamCitySauceOnDemandBrowsers environment variable will be populated.
        string configs = EnvVariable(TeamCitySauceOnDemandBrowsers);
        return string.IsNullOrEmpty(configs) ? 
            string.Format("[{\"platform\":\"{0}\",\"browser\":\"{1}\",\"browser-version\":\"{2}\"}]", EnvVariable(TeamCitySeleniumPlatform), EnvVariable(TeamCitySeleniumBrowser), EnvVariable(TeamCitySeleniumVersion)) 
            : configs;
    }

    public class WebTestConfiguration
    {
        public string Platform { get; set; }

        public string Browser { get; set; }

        public string Url { get; set; }

        public string BrowserVersion { get; set; }
    }
#>